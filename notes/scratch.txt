*****************************************
* scratch.txt                           *
* Notes for development                 *
* Also, I/0 listings and delegation     *
*****************************************

2012-07-28 I/O draft
2 ADC for IR ranger
2 DIG for associated phototransistors
2/4 DIG for touch, octv. up/down
USB - note: get extender, perhaps USB Mini-B plug to USB B receptacle?

Accessibility, ease of use, and easy theory use are important goals.

To count total lines in a git repo, use 
    git ls-files | xargs wc -l

NOTE: Processing IDE does not support enums, foreach, generics, varargs, etc.
Processing only supports Java 1.4(and earlier) syntax.
Workaround is to develop in another Java IDE

Switch to all non-primitive data types eventually.
Switching to at least Boolean is easily possible.

SCALES
MAJOR       {0,2,4,5,7,9,11}
MINOR       {0,2,3,5,7,8,10}
CHROMATIC   {0,1,2,3,4,5,6,7,8,9,10,11}
PENTATONIC  {0,2,4,7,9}

Priorities, from high to low:
Core
MIDI output
OSC input
MIDI input
Audio I/O
FFT displays

Everything must be checked that it is updated. To check:
Processing (holding off on 2.0 until the project is presented)
ControlP5
OscP5, NetP5
Minim
RWMidi

Exception catching needs to be much more heavily implemented.
Some exceptions are best handled by waiting 1000ms and trying once again.

Consider adding many interfaces to LMMain, as it is very messy.

Future considerations:
A Picaxe micro could be used for audio synthesis, controlled by the Arduino

NetAddress wrapper (LMOscClient) needs to be fixed

Terms:
Beam - meaning the aggregate sensor, composed of laser/photodiode pair and IR ranger

UI:
Section for each beam
    Division controls
    Octv +/-
    MIDI out (channel, velocity)
Section for MIDI
    Start MIDI
    Stop MIDI
    MIDI status
    MIDI history


To implement later: Add support for non-linear beam division

Two different capacitive touch sensing implementations:

Via amagill:
Using one digital pin. Set pin to output, set high, wait, set to input, observe how long it takes to drop to low. Slower = greater capacitance.

Via Arduino Playground, CapSense, Paul Badger:
Using two digital pins. Connect send pin to receive pin via 1+ megohm resistor, foil attached to receive pin. Toggle send pin state, observe how long it takes for receive pin to change to same state. Longer time = greater capacitance.
Putting ground plane under foil contacts improves sensitivity and eliminates floating ground problems.

Touch sensing will run in its own thread, perhaps create the thread as a inner class of LMTouchSensor.
Also, all classes (including LMTouchSensor) need to have a proper destroy/stop/exit method that will be called in stop(). 

Possible to implement an optional debug file, have boolean for DEBUG_FILE, if true, create a text file and log data..

Use OSC /SYN/ namespacing for output only.
OSC communication between mobile controller (iOS/Android device) will use proprietary protocol, as rather stranger parameters are being transmitted.


